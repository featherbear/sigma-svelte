{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Sigma.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import sigma from \"sigma.require.js\";\n  import \"plugins/sigma.parsers.gexf.min.js\";\n\n  let elem;\n\n  import { onMount } from \"svelte\";\n\n  sigma.classes.graph.addMethod(\"neighbors\", function(nodeId) {\n    var k,\n      neighbors = {},\n      index = this.allNeighborsIndex[nodeId] || {};\n\n    for (k in index) neighbors[k] = this.nodesIndex[k];\n\n    return neighbors;\n  });\n\n  onMount(() => {\n    sigma.parsers.gexf(\n      \"standard_graph.gexf\",\n\n      {\n        container: elem\n      },\n\n      function(s) {\n        s.graph.nodes().forEach(function(n) {\n          n.originalColor = n.color;\n        });\n        s.graph.edges().forEach(function(e) {\n          e.originalColor = e.color;\n        });\n\n        // When a node is clicked, we check for each node\n        // if it is a neighbor of the clicked one. If not,\n        // we set its color as grey, and else, it takes its\n        // original color.\n        // We do the same for the edges, and we only keep\n        // edges that have both extremities colored.\n        s.bind(\"clickNode\", function(e) {\n          var nodeId = e.data.node.id,\n            toKeep = s.graph.neighbors(nodeId);\n          toKeep[nodeId] = e.data.node;\n\n          s.graph.nodes().forEach(function(n) {\n            if (toKeep[n.id]) n.color = n.originalColor;\n            else n.color = \"#eee\";\n          });\n\n          s.graph.edges().forEach(function(e) {\n            if (toKeep[e.source] && toKeep[e.target]) e.color = e.originalColor;\n            else e.color = \"#eee\";\n          });\n\n          // Since the data has been modified, we need to\n          // call the refresh method to make the colors\n          // update effective.\n          s.refresh();\n        });\n\n        // When the stage is clicked, we just color each\n        // node and edge with its original color.\n        s.bind(\"clickStage\", function(e) {\n          s.graph.nodes().forEach(function(n) {\n            n.color = n.originalColor;\n          });\n\n          s.graph.edges().forEach(function(e) {\n            e.color = e.originalColor;\n          });\n\n          // Same as in the previous event:\n          s.refresh();\n        });\n      }\n    );\n  });\n</script>\n\n<style>\n  .sigmaElement {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div bind:this={elem} class=\"sigmaElement\" />\n"
  ],
  "names": [],
  "mappings": "AAiFE,aAAa,aAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC"
}